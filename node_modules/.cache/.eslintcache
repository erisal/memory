[{"/home/erik/the_odin_project/memory/src/index.js":"1","/home/erik/the_odin_project/memory/src/App.js":"2","/home/erik/the_odin_project/memory/src/reportWebVitals.js":"3"},{"size":500,"mtime":1616431076732,"results":"4","hashOfConfig":"5"},{"size":4012,"mtime":1616474478249,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1616431076732,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4zvft4",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/erik/the_odin_project/memory/src/index.js",[],"/home/erik/the_odin_project/memory/src/App.js",["15","16","17"],"import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react'; \n\nconst App = () => {\n  const cardDisplayCount = 9;\n  const initialCards = [\n    {\n      id: '01',\n      name: 'turquoise',\n      value: '#00ffff',\n      clicked: false,\n    },\n    {\n      id: '02',\n      name: 'tomato',\n      value: '#ff6347',\n      clicked: false,\n    },\n    {\n      id: '03',\n      name: 'light gray',\n      value: '#d3d3d3',\n      clicked: false,\n    },\n    {\n      id: '04',\n      name: 'orange red',\n      value: '#ff4500',\n      clicked: false,\n    },\n    {\n      id: '05',\n      name: 'orchid',\n      value: '#da70d6',\n      clicked: false,\n    },\n    {\n      id: '06',\n      name: 'lime green',\n      value: '#32cd32',\n      clicked: false,\n    },\n    {\n      id: '07',\n      name: 'fuchsia',\n      value: '#ff00ff',\n      clicked: false,\n    },\n    {\n      id: '08',\n      name: 'purple',\n      value: '#800080',\n      clicked: false,\n    },\n    {\n      id: '09',\n      name: 'slate blue',\n      value: '#6a5acd',\n      clicked: false,\n    },\n    {\n      id: '10',\n      name: 'steel blue',\n      value: '#4682b4',\n      clicked: false,\n    },\n    {\n      id: '11',\n      name: 'brown',\n      value: '#a52a2a',\n      clicked: false,\n    },\n    {\n      id: '12',\n      name: 'black',\n      value: '#000000',\n      clicked: false,\n    },\n    {\n      id: '13',\n      name: 'midnight blue',\n      value: '#191970',\n      clicked: false,\n    },\n    {\n      id: '14',\n      name: 'olive drab',\n      value: '#6b8e23',\n      clicked: false,\n    },\n    {\n      id: '15',\n      name: 'hot pink',\n      value: '#ff69b4',\n      clicked: false,\n    },\n    {\n      id: '16',\n      name: 'indigo',\n      value: '#4b0082',\n      clicked: false,\n    },\n    {\n      id: '17',\n      name: 'khaki',\n      value: '#f0e68c',\n      clicked: false,\n    },\n    {\n      id: '18',\n      name: 'white',\n      value: '#ffffff',\n      clicked: false,\n    },\n    {\n      id: '19',\n      name: 'navy',\n      value: '#000080',\n      clicked: false,\n    },\n    {\n      id: '20',\n      name: 'orange',\n      value: '#ffa500',\n      clicked: false,\n    },\n\n  ];\n  const [cards, setCards] = useState(initialCards);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighSchore] = useState(0);\n\n\n\n  const randomer = () => {\n    let newOrder = [];\n    let cardsCopy = [...cards];\n    while (newOrder.length < cardDisplayCount) {\n      let rdmIndex = Math.floor(Math.random() * Math.floor(cardsCopy.length))\n      newOrder.push(cardsCopy[rdmIndex]);\n      cardsCopy.splice(rdmIndex, 1);\n    }\n    return newOrder;\n  }\n\n  const cardClicked = (id) => {\n    let newCards = [];\n    let toReset = false;\n    cards.map((card) => {\n      if (card.id === id && card.clicked) {\n          console.log('got to first')\n          toReset = true;\n        }\n\n      else {\n        if (card.id === id) {\n        increaseScore();\n        newCards.push(\n          {\n            id: card.id,\n            name: card.name,\n            value: card.value,\n            clicked: true,\n          }\n        )\n       }\n        else { newCards.push(card) }\n    }\n      \n    })\n    if (toReset) {\n      resetBoard();\n    }\n    else setCards(newCards);\n      \n  }\n\n  const resetBoard = () => {\n\n    setCards(initialCards);\n    \n    if (score > highScore) {\n      setHighSchore(score);\n    }\n    setScore(0);\n\n  }\n\n  const increaseScore = () => {\n    setScore(score + 1);\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"scoreboard\">\n        <div id=\"currentScore\">Score: {score}</div>\n        <div id=\"highScore\">High Score: {highScore}</div>\n      </div>\n      <div id=\"cardsContainer\">\n      {\n        \n        randomer().map((card) => \n            <div className='cardHolder' key={card.id} id={card.id} style={{\n              backgroundColor: card.value,              \n              }} onClick={() => cardClicked(card.id)}>{card.name}\n              </div>\n        )\n      }\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/erik/the_odin_project/memory/src/reportWebVitals.js",[],{"ruleId":"18","severity":1,"message":"19","line":1,"column":8,"nodeType":"20","messageId":"21","endLine":1,"endColumn":12},{"ruleId":"18","severity":1,"message":"22","line":3,"column":27,"nodeType":"20","messageId":"21","endLine":3,"endColumn":36},{"ruleId":"23","severity":1,"message":"24","line":150,"column":22,"nodeType":"25","messageId":"26","endLine":150,"endColumn":24},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]