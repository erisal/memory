{"ast":null,"code":"var _jsxFileName = \"/home/erik/the_odin_project/memory/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const cardDisplayCount = 3;\n  const initialCards = [{\n    id: '01',\n    name: 'turquoise',\n    value: '#00ffff',\n    clicked: false\n  }, {\n    id: '02',\n    name: 'tomato',\n    value: '#ff6347',\n    clicked: false\n  }, {\n    id: '03',\n    name: 'light gray',\n    value: '#d3d3d3',\n    clicked: false\n  }, {\n    id: '04',\n    name: 'orange red',\n    value: '#ff4500',\n    clicked: false\n  }, {\n    id: '05',\n    name: 'orchid',\n    value: '#da70d6',\n    clicked: false\n  }];\n  const [cards, setCards] = useState(initialCards);\n\n  const randomer = () => {\n    let newOrder = [];\n    let cardsCopy = [...cards];\n\n    while (newOrder.length < cardDisplayCount) {\n      let rdmIndex = Math.floor(Math.random() * Math.floor(cardsCopy.length));\n      newOrder.push(cardsCopy[rdmIndex]);\n      cardsCopy.splice(rdmIndex, 1);\n    }\n\n    return newOrder;\n  };\n\n  const cardClicked = id => {\n    let newCards = [];\n    cards.map(card => {\n      if (card.id === id) {\n        newCards.push({\n          id: card.id,\n          name: card.name,\n          value: card.value,\n          clicked: true\n        });\n      } else {\n        newCards.push(card);\n      }\n    });\n    setCards(newCards);\n  };\n\n  useEffect(() => {}, cards);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"cardsContainer\",\n      children: randomer().map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardHolder\",\n        id: card.id,\n        style: {\n          backgroundColor: card.value,\n          width: '200px',\n          height: '200px'\n        },\n        onClick: cardClicked(card.id),\n        children: [card.name, \" - \", card.id, \" - \", card.clicked.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"RFZNOatQGYMqzj4Spzmkw3EOGUY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/erik/the_odin_project/memory/src/App.js"],"names":["React","useState","useEffect","App","cardDisplayCount","initialCards","id","name","value","clicked","cards","setCards","randomer","newOrder","cardsCopy","length","rdmIndex","Math","floor","random","push","splice","cardClicked","newCards","map","card","backgroundColor","width","height","toString"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react'; \n\nconst App = () => {\n  const cardDisplayCount = 3;\n  const initialCards = [\n    {\n      id: '01',\n      name: 'turquoise',\n      value: '#00ffff',\n      clicked: false,\n    },\n    {\n      id: '02',\n      name: 'tomato',\n      value: '#ff6347',\n      clicked: false,\n    },\n    {\n      id: '03',\n      name: 'light gray',\n      value: '#d3d3d3',\n      clicked: false,\n    },\n    {\n      id: '04',\n      name: 'orange red',\n      value: '#ff4500',\n      clicked: false,\n    },\n    {\n      id: '05',\n      name: 'orchid',\n      value: '#da70d6',\n      clicked: false,\n    }\n  ];\n  const [cards, setCards] = useState(initialCards);\n\n\n\n  const randomer = () => {\n    let newOrder = [];\n    let cardsCopy = [...cards];\n    while (newOrder.length < cardDisplayCount) {\n      let rdmIndex = Math.floor(Math.random() * Math.floor(cardsCopy.length))\n      newOrder.push(cardsCopy[rdmIndex]);\n      cardsCopy.splice(rdmIndex, 1);\n    }\n    return newOrder;\n  }\n\n  const cardClicked = (id) => {\n    let newCards = [];\n    cards.map((card) => {\n      if (card.id === id) {\n        newCards.push(\n          {\n            id: card.id,\n            name: card.name,\n            value: card.value,\n            clicked: true,\n          }\n        )\n      }\n        else { newCards.push(card) }\n      })\n      setCards(newCards);\n  }\n\n  useEffect(() => {\n    \n  }, cards);\n  \n\n\n  return (\n    <div className=\"App\">\n      <div id=\"cardsContainer\">\n      {\n        \n        randomer().map((card) => \n            <div className='cardHolder' id={card.id} style={{\n              backgroundColor: card.value,\n              width: '200px',\n              height: '200px',\n              \n              }} onClick={cardClicked(card.id)}>{card.name} - {card.id} - {card.clicked.toString()}\n              </div>\n        )\n      }\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}