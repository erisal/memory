{"ast":null,"code":"var _jsxFileName = \"/home/erik/the_odin_project/memory/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const cardDisplayCount = 3;\n  const initialCards = [{\n    id: '01',\n    name: 'turquoise',\n    value: '#00ffff',\n    clicked: false\n  }, {\n    id: '02',\n    name: 'tomato',\n    value: '#ff6347',\n    clicked: false\n  }, {\n    id: '03',\n    name: 'light gray',\n    value: '#d3d3d3',\n    clicked: false\n  }, {\n    id: '04',\n    name: 'orange red',\n    value: '#ff4500',\n    clicked: false\n  }, {\n    id: '05',\n    name: 'orchid',\n    value: '#da70d6',\n    clicked: false\n  }];\n  const [cards, setCards] = useState(initialCards);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighSchore] = useState(0);\n\n  const randomer = () => {\n    let newOrder = [];\n    let cardsCopy = [...cards];\n\n    while (newOrder.length < cardDisplayCount) {\n      let rdmIndex = Math.floor(Math.random() * Math.floor(cardsCopy.length));\n      newOrder.push(cardsCopy[rdmIndex]);\n      cardsCopy.splice(rdmIndex, 1);\n    }\n\n    return newOrder;\n  };\n\n  const cardClicked = id => {\n    let newCards = [];\n    cards.map(card => {\n      if (card.id === id) {\n        if (card.clicked) {\n          console.log('got to first');\n          resetBoard();\n        } else {\n          increaseScore();\n          newCards.push({\n            id: card.id,\n            name: card.name,\n            value: card.value,\n            clicked: true\n          });\n        }\n      } else {\n        newCards.push(card);\n      }\n    });\n    setCards(newCards);\n  };\n\n  const resetBoard = () => {\n    console.log('got to second');\n    setCards(initialCards);\n    setScore(0);\n    console.log('got to third');\n    console.log('got to fourth');\n  };\n\n  const increaseScore = () => {\n    setScore(score + 1);\n\n    if (score > highScore) {\n      setHighSchore(score + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"scoreboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"currentScore\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"highScore\",\n        children: [\"High Score: \", highScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => resetBoard(),\n        children: \"reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"cardsContainer\",\n      children: randomer().map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardHolder\",\n        id: card.id,\n        style: {\n          backgroundColor: card.value,\n          width: '200px',\n          height: '200px'\n        },\n        onClick: () => cardClicked(card.id),\n        children: [card.name, \" - \", card.id, \" - \", card.clicked.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"k5/ILRoi2OMkAfSH9mrBXX9/3ak=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/erik/the_odin_project/memory/src/App.js"],"names":["React","useState","useEffect","App","cardDisplayCount","initialCards","id","name","value","clicked","cards","setCards","score","setScore","highScore","setHighSchore","randomer","newOrder","cardsCopy","length","rdmIndex","Math","floor","random","push","splice","cardClicked","newCards","map","card","console","log","resetBoard","increaseScore","backgroundColor","width","height","toString"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react'; \n\nconst App = () => {\n  const cardDisplayCount = 3;\n  const initialCards = [\n    {\n      id: '01',\n      name: 'turquoise',\n      value: '#00ffff',\n      clicked: false,\n    },\n    {\n      id: '02',\n      name: 'tomato',\n      value: '#ff6347',\n      clicked: false,\n    },\n    {\n      id: '03',\n      name: 'light gray',\n      value: '#d3d3d3',\n      clicked: false,\n    },\n    {\n      id: '04',\n      name: 'orange red',\n      value: '#ff4500',\n      clicked: false,\n    },\n    {\n      id: '05',\n      name: 'orchid',\n      value: '#da70d6',\n      clicked: false,\n    }\n  ];\n  const [cards, setCards] = useState(initialCards);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighSchore] = useState(0);\n\n\n\n  const randomer = () => {\n    let newOrder = [];\n    let cardsCopy = [...cards];\n    while (newOrder.length < cardDisplayCount) {\n      let rdmIndex = Math.floor(Math.random() * Math.floor(cardsCopy.length))\n      newOrder.push(cardsCopy[rdmIndex]);\n      cardsCopy.splice(rdmIndex, 1);\n    }\n    return newOrder;\n  }\n\n  const cardClicked = (id) => {\n    let newCards = [];\n    cards.map((card) => {\n      if (card.id === id) {\n        if (card.clicked) {\n          console.log('got to first')\n          resetBoard();\n\n        }\n        else {\n          increaseScore();\n          newCards.push(\n            {\n              id: card.id,\n              name: card.name,\n              value: card.value,\n              clicked: true,\n            }\n          )\n        }\n        \n      }\n        else { newCards.push(card) }\n      })\n      setCards(newCards);\n  }\n\n  const resetBoard = () => {\n    console.log('got to second');\n    setCards(initialCards);\n    setScore(0);\n    console.log('got to third');\n    \n    console.log('got to fourth');\n  }\n\n  const increaseScore = () => {\n    setScore(score + 1);\n    if (score > highScore) {\n      setHighSchore(score + 1);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"scoreboard\">\n        <div id=\"currentScore\">Score: {score}</div>\n        <div id=\"highScore\">High Score: {highScore}</div>\n        <button onClick={() => resetBoard()}>reset</button>\n      </div>\n      <div id=\"cardsContainer\">\n      {\n        \n        randomer().map((card) => \n            <div className='cardHolder' id={card.id} style={{\n              backgroundColor: card.value,\n              width: '200px',\n              height: '200px',\n              \n              }} onClick={() => cardClicked(card.id)}>{card.name} - {card.id} - {card.clicked.toString()}\n              </div>\n        )\n      }\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}