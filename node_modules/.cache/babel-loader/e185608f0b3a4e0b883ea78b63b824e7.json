{"ast":null,"code":"var _jsxFileName = \"/home/erik/the_odin_project/memory/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const cardDisplayCount = 9;\n  const initialCards = [{\n    id: '01',\n    name: 'turquoise',\n    value: '#00ffff',\n    clicked: false\n  }, {\n    id: '02',\n    name: 'tomato',\n    value: '#ff6347',\n    clicked: false\n  }, {\n    id: '03',\n    name: 'light gray',\n    value: '#d3d3d3',\n    clicked: false\n  }, {\n    id: '04',\n    name: 'orange red',\n    value: '#ff4500',\n    clicked: false\n  }, {\n    id: '05',\n    name: 'orchid',\n    value: '#da70d6',\n    clicked: false\n  }, {\n    id: '06',\n    name: 'lime green',\n    value: '#32cd32',\n    clicked: false\n  }, {\n    id: '07',\n    name: 'fuchsia',\n    value: '#ff00ff',\n    clicked: false\n  }, {\n    id: '08',\n    name: 'purple',\n    value: '#800080',\n    clicked: false\n  }, {\n    id: '09',\n    name: 'slate blue',\n    value: '#6a5acd',\n    clicked: false\n  }, {\n    id: '10',\n    name: 'steel blue',\n    value: '#4682b4',\n    clicked: false\n  }, {\n    id: '11',\n    name: 'brown',\n    value: '#a52a2a',\n    clicked: false\n  }, {\n    id: '12',\n    name: 'black',\n    value: '#000000',\n    clicked: false\n  }, {\n    id: '13',\n    name: 'midnight blue',\n    value: '#191970',\n    clicked: false\n  }, {\n    id: '14',\n    name: 'olive drab',\n    value: '#6b8e23',\n    clicked: false\n  }, {\n    id: '15',\n    name: 'hot pink',\n    value: '#ff69b4',\n    clicked: false\n  }, {\n    id: '16',\n    name: 'indigo',\n    value: '#4b0082',\n    clicked: false\n  }, {\n    id: '17',\n    name: 'khaki',\n    value: '#f0e68c',\n    clicked: false\n  }, {\n    id: '18',\n    name: 'white',\n    value: '#ffffff',\n    clicked: false\n  }, {\n    id: '19',\n    name: 'navy',\n    value: '#000080',\n    clicked: false\n  }, {\n    id: '20',\n    name: 'orange',\n    value: '#ffa500',\n    clicked: false\n  }];\n  const [cards, setCards] = useState(initialCards);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighSchore] = useState(0);\n\n  const randomer = () => {\n    let newOrder = [];\n    let cardsCopy = [...cards];\n\n    while (newOrder.length < cardDisplayCount) {\n      let rdmIndex = Math.floor(Math.random() * Math.floor(cardsCopy.length));\n      newOrder.push(cardsCopy[rdmIndex]);\n      cardsCopy.splice(rdmIndex, 1);\n    }\n\n    return newOrder;\n  };\n\n  const cardClicked = id => {\n    let newCards = [];\n    let toReset = false;\n    cards.map(card => {\n      if (card.id === id && card.clicked) {\n        console.log('got to first');\n        toReset = true;\n      } else {\n        if (card.id === id) {\n          increaseScore();\n          newCards.push({\n            id: card.id,\n            name: card.name,\n            value: card.value,\n            clicked: true\n          });\n        } else {\n          newCards.push(card);\n        }\n      }\n    });\n\n    if (toReset) {\n      resetBoard();\n    } else setCards(newCards);\n  };\n\n  const resetBoard = () => {\n    setCards(initialCards);\n\n    if (score > highScore) {\n      setHighSchore(score);\n    }\n\n    setScore(0);\n  };\n\n  const increaseScore = () => {\n    setScore(score + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"scoreboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"currentScore\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"highScore\",\n        children: [\"High Score: \", highScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => resetBoard(),\n        children: \"reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"cardsContainer\",\n      children: randomer().map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardHolder\",\n        id: card.id,\n        style: {\n          backgroundColor: card.value,\n          width: '200px',\n          height: '200px'\n        },\n        onClick: () => cardClicked(card.id),\n        children: [card.name, \" - \", card.id, \" - \", card.clicked.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"k5/ILRoi2OMkAfSH9mrBXX9/3ak=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/erik/the_odin_project/memory/src/App.js"],"names":["React","useState","useEffect","App","cardDisplayCount","initialCards","id","name","value","clicked","cards","setCards","score","setScore","highScore","setHighSchore","randomer","newOrder","cardsCopy","length","rdmIndex","Math","floor","random","push","splice","cardClicked","newCards","toReset","map","card","console","log","increaseScore","resetBoard","backgroundColor","width","height","toString"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react'; \n\nconst App = () => {\n  const cardDisplayCount = 9;\n  const initialCards = [\n    {\n      id: '01',\n      name: 'turquoise',\n      value: '#00ffff',\n      clicked: false,\n    },\n    {\n      id: '02',\n      name: 'tomato',\n      value: '#ff6347',\n      clicked: false,\n    },\n    {\n      id: '03',\n      name: 'light gray',\n      value: '#d3d3d3',\n      clicked: false,\n    },\n    {\n      id: '04',\n      name: 'orange red',\n      value: '#ff4500',\n      clicked: false,\n    },\n    {\n      id: '05',\n      name: 'orchid',\n      value: '#da70d6',\n      clicked: false,\n    },\n    {\n      id: '06',\n      name: 'lime green',\n      value: '#32cd32',\n      clicked: false,\n    },\n    {\n      id: '07',\n      name: 'fuchsia',\n      value: '#ff00ff',\n      clicked: false,\n    },\n    {\n      id: '08',\n      name: 'purple',\n      value: '#800080',\n      clicked: false,\n    },\n    {\n      id: '09',\n      name: 'slate blue',\n      value: '#6a5acd',\n      clicked: false,\n    },\n    {\n      id: '10',\n      name: 'steel blue',\n      value: '#4682b4',\n      clicked: false,\n    },\n    {\n      id: '11',\n      name: 'brown',\n      value: '#a52a2a',\n      clicked: false,\n    },\n    {\n      id: '12',\n      name: 'black',\n      value: '#000000',\n      clicked: false,\n    },\n    {\n      id: '13',\n      name: 'midnight blue',\n      value: '#191970',\n      clicked: false,\n    },\n    {\n      id: '14',\n      name: 'olive drab',\n      value: '#6b8e23',\n      clicked: false,\n    },\n    {\n      id: '15',\n      name: 'hot pink',\n      value: '#ff69b4',\n      clicked: false,\n    },\n    {\n      id: '16',\n      name: 'indigo',\n      value: '#4b0082',\n      clicked: false,\n    },\n    {\n      id: '17',\n      name: 'khaki',\n      value: '#f0e68c',\n      clicked: false,\n    },\n    {\n      id: '18',\n      name: 'white',\n      value: '#ffffff',\n      clicked: false,\n    },\n    {\n      id: '19',\n      name: 'navy',\n      value: '#000080',\n      clicked: false,\n    },\n    {\n      id: '20',\n      name: 'orange',\n      value: '#ffa500',\n      clicked: false,\n    },\n\n  ];\n  const [cards, setCards] = useState(initialCards);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighSchore] = useState(0);\n\n\n\n  const randomer = () => {\n    let newOrder = [];\n    let cardsCopy = [...cards];\n    while (newOrder.length < cardDisplayCount) {\n      let rdmIndex = Math.floor(Math.random() * Math.floor(cardsCopy.length))\n      newOrder.push(cardsCopy[rdmIndex]);\n      cardsCopy.splice(rdmIndex, 1);\n    }\n    return newOrder;\n  }\n\n  const cardClicked = (id) => {\n    let newCards = [];\n    let toReset = false;\n    cards.map((card) => {\n      if (card.id === id && card.clicked) {\n          console.log('got to first')\n          toReset = true;\n        }\n\n      else {\n        if (card.id === id) {\n        increaseScore();\n        newCards.push(\n          {\n            id: card.id,\n            name: card.name,\n            value: card.value,\n            clicked: true,\n          }\n        )\n       }\n        else { newCards.push(card) }\n    }\n      \n    })\n    if (toReset) {\n      resetBoard();\n    }\n    else setCards(newCards);\n      \n  }\n\n  const resetBoard = () => {\n\n    setCards(initialCards);\n    \n    if (score > highScore) {\n      setHighSchore(score);\n    }\n    setScore(0);\n\n  }\n\n  const increaseScore = () => {\n    setScore(score + 1);\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"scoreboard\">\n        <div id=\"currentScore\">Score: {score}</div>\n        <div id=\"highScore\">High Score: {highScore}</div>\n        <button onClick={() => resetBoard()}>reset</button>\n      </div>\n      <div id=\"cardsContainer\">\n      {\n        \n        randomer().map((card) => \n            <div className='cardHolder' id={card.id} style={{\n              backgroundColor: card.value,\n              width: '200px',\n              height: '200px',\n              \n              }} onClick={() => cardClicked(card.id)}>{card.name} - {card.id} - {card.clicked.toString()}\n              </div>\n        )\n      }\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}